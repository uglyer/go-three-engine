// Code generated by cmd/gen_enums. DO NOT EDIT.

package wgpu

import "fmt"

type AdapterType uint32

const (
	AdapterType_DiscreteGPU   AdapterType = 0x00000000
	AdapterType_IntegratedGPU AdapterType = 0x00000001
	AdapterType_CPU           AdapterType = 0x00000002
	AdapterType_Unknown       AdapterType = 0x00000003
)

func (v AdapterType) String() string {
	switch v {
	case AdapterType_DiscreteGPU:
		return "discrete-gpu"
	case AdapterType_IntegratedGPU:
		return "integrated-gpu"
	case AdapterType_CPU:
		return "cpu"
	case AdapterType_Unknown:
		return "unknown"
	default:
		return ""
	}
}
func StringToAdapterType(str string) AdapterType {
	switch str {
	case "discrete-gpu":
		return AdapterType_DiscreteGPU
	case "integrated-gpu":
		return AdapterType_IntegratedGPU
	case "cpu":
		return AdapterType_CPU
	case "unknown":
		return AdapterType_Unknown
	case "force32":
		return AdapterType_Force32
	default:
		panic(fmt.Sprintf("%s convert to AdapterType error", str))
	}
}

type AddressMode uint32

const (
	AddressMode_Repeat       AddressMode = 0x00000000
	AddressMode_MirrorRepeat AddressMode = 0x00000001
	AddressMode_ClampToEdge  AddressMode = 0x00000002
	AddressMode_Force32      AddressMode = 0x7FFFFFFF
)

func (v AddressMode) String() string {
	switch v {
	case AddressMode_Repeat:
		return "repeat"
	case AddressMode_MirrorRepeat:
		return "mirror-repeat"
	case AddressMode_ClampToEdge:
		return "clamp-to-edge"
	case AddressMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToAddressMode(str string) AddressMode {
	switch str {
	case "repeat":
		return AddressMode_Repeat
	case "mirror-repeat":
		return AddressMode_MirrorRepeat
	case "clamp-to-edge":
		return AddressMode_ClampToEdge
	case "force32":
		return AddressMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to AddressMode error", str))
	}
}

type BackendType uint32

const (
	BackendType_Undefined BackendType = 0x00000000
	BackendType_Null      BackendType = 0x00000001
	BackendType_WebGPU    BackendType = 0x00000002
	BackendType_D3D11     BackendType = 0x00000003
	BackendType_D3D12     BackendType = 0x00000004
	BackendType_Metal     BackendType = 0x00000005
	BackendType_Vulkan    BackendType = 0x00000006
	BackendType_OpenGL    BackendType = 0x00000007
	BackendType_OpenGLES  BackendType = 0x00000008
)

func (v BackendType) String() string {
	switch v {
	case BackendType_Undefined:
		return "Undefined"
	case BackendType_Null:
		return "Null"
	case BackendType_WebGPU:
		return "WebGPU"
	case BackendType_D3D11:
		return "D3D11"
	case BackendType_D3D12:
		return "D3D12"
	case BackendType_Metal:
		return "Metal"
	case BackendType_Vulkan:
		return "Vulkan"
	case BackendType_OpenGL:
		return "OpenGL"
	case BackendType_OpenGLES:
		return "OpenGLES"
	default:
		return ""
	}
}

type BlendFactor uint32

const (
	BlendFactor_Zero              BlendFactor = 0x00000000
	BlendFactor_One               BlendFactor = 0x00000001
	BlendFactor_Src               BlendFactor = 0x00000002
	BlendFactor_OneMinusSrc       BlendFactor = 0x00000003
	BlendFactor_SrcAlpha          BlendFactor = 0x00000004
	BlendFactor_OneMinusSrcAlpha  BlendFactor = 0x00000005
	BlendFactor_Dst               BlendFactor = 0x00000006
	BlendFactor_OneMinusDst       BlendFactor = 0x00000007
	BlendFactor_DstAlpha          BlendFactor = 0x00000008
	BlendFactor_OneMinusDstAlpha  BlendFactor = 0x00000009
	BlendFactor_SrcAlphaSaturated BlendFactor = 0x0000000A
	BlendFactor_Constant          BlendFactor = 0x0000000B
	BlendFactor_OneMinusConstant  BlendFactor = 0x0000000C
	BlendFactor_Force32           BlendFactor = 0x7FFFFFFF
)

func (v BlendFactor) String() string {
	switch v {
	case BlendFactor_Zero:
		return "zero"
	case BlendFactor_One:
		return "one"
	case BlendFactor_Src:
		return "src"
	case BlendFactor_OneMinusSrc:
		return "one-minus-src"
	case BlendFactor_SrcAlpha:
		return "src-alpha"
	case BlendFactor_OneMinusSrcAlpha:
		return "one-minus-src-alpha"
	case BlendFactor_Dst:
		return "dst"
	case BlendFactor_OneMinusDst:
		return "one-minus-dst"
	case BlendFactor_DstAlpha:
		return "dst-alpha"
	case BlendFactor_OneMinusDstAlpha:
		return "one-minus-dst-alpha"
	case BlendFactor_SrcAlphaSaturated:
		return "src-alpha-saturated"
	case BlendFactor_Constant:
		return "constant"
	case BlendFactor_OneMinusConstant:
		return "one-minus-constant"
	case BlendFactor_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToBlendFactor(str string) BlendFactor {
	switch str {
	case "zero":
		return BlendFactor_Zero
	case "one":
		return BlendFactor_One
	case "src":
		return BlendFactor_Src
	case "one-minus-src":
		return BlendFactor_OneMinusSrc
	case "src-alpha":
		return BlendFactor_SrcAlpha
	case "one-minus-src-alpha":
		return BlendFactor_OneMinusSrcAlpha
	case "dst":
		return BlendFactor_Dst
	case "one-minus-dst":
		return BlendFactor_OneMinusDst
	case "dst-alpha":
		return BlendFactor_DstAlpha
	case "one-minus-dst-alpha":
		return BlendFactor_OneMinusDstAlpha
	case "src-alpha-saturated":
		return BlendFactor_SrcAlphaSaturated
	case "constant":
		return BlendFactor_Constant
	case "one-minus-constant":
		return BlendFactor_OneMinusConstant
	case "force32":
		return BlendFactor_Force32
	default:
		panic(fmt.Sprintf("%s convert to BlendFactor error", str))
	}
}

type BlendOperation uint32

const (
	BlendOperation_Add             BlendOperation = 0x00000000
	BlendOperation_Subtract        BlendOperation = 0x00000001
	BlendOperation_ReverseSubtract BlendOperation = 0x00000002
	BlendOperation_Min             BlendOperation = 0x00000003
	BlendOperation_Max             BlendOperation = 0x00000004
	BlendOperation_Force32         BlendOperation = 0x7FFFFFFF
)

func (v BlendOperation) String() string {
	switch v {
	case BlendOperation_Add:
		return "add"
	case BlendOperation_Subtract:
		return "subtract"
	case BlendOperation_ReverseSubtract:
		return "reverse-subtract"
	case BlendOperation_Min:
		return "min"
	case BlendOperation_Max:
		return "max"
	case BlendOperation_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToBlendOperation(str string) BlendOperation {
	switch str {
	case "add":
		return BlendOperation_Add
	case "subtract":
		return BlendOperation_Subtract
	case "reverse-subtract":
		return BlendOperation_ReverseSubtract
	case "min":
		return BlendOperation_Min
	case "max":
		return BlendOperation_Max
	case "force32":
		return BlendOperation_Force32
	default:
		panic(fmt.Sprintf("%s convert to BlendOperation error", str))
	}
}

type BufferBindingType uint32

const (
	BufferBindingType_Undefined       BufferBindingType = 0x00000000
	BufferBindingType_Uniform         BufferBindingType = 0x00000001
	BufferBindingType_Storage         BufferBindingType = 0x00000002
	BufferBindingType_ReadOnlyStorage BufferBindingType = 0x00000003
)

func (v BufferBindingType) String() string {
	switch v {
	case BufferBindingType_Undefined:
		return "undefined"
	case BufferBindingType_Uniform:
		return "uniform"
	case BufferBindingType_Storage:
		return "storage"
	case BufferBindingType_ReadOnlyStorage:
		return "read-only-storage"
	default:
		return ""
	}
}
func StringToBufferBindingType(str string) BufferBindingType {
	switch str {
	case "undefined":
		return BufferBindingType_Undefined
	case "uniform":
		return BufferBindingType_Uniform
	case "storage":
		return BufferBindingType_Storage
	case "read-only-storage":
		return BufferBindingType_ReadOnlyStorage
	default:
		panic(fmt.Sprintf("%s convert to BufferBindingType error", str))
	}
}

type BufferMapAsyncStatus uint32

const (
	BufferMapAsyncStatus_Success                 BufferMapAsyncStatus = 0x00000000
	BufferMapAsyncStatus_Error                   BufferMapAsyncStatus = 0x00000001
	BufferMapAsyncStatus_Unknown                 BufferMapAsyncStatus = 0x00000002
	BufferMapAsyncStatus_DeviceLost              BufferMapAsyncStatus = 0x00000003
	BufferMapAsyncStatus_DestroyedBeforeCallback BufferMapAsyncStatus = 0x00000004
	BufferMapAsyncStatus_UnmappedBeforeCallback  BufferMapAsyncStatus = 0x00000005
	BufferMapAsyncStatus_Force32                 BufferMapAsyncStatus = 0x7FFFFFFF
)

func (v BufferMapAsyncStatus) String() string {
	switch v {
	case BufferMapAsyncStatus_Success:
		return "success"
	case BufferMapAsyncStatus_Error:
		return "error"
	case BufferMapAsyncStatus_Unknown:
		return "unknown"
	case BufferMapAsyncStatus_DeviceLost:
		return "device-lost"
	case BufferMapAsyncStatus_DestroyedBeforeCallback:
		return "destroyed-before-callback"
	case BufferMapAsyncStatus_UnmappedBeforeCallback:
		return "unmapped-before-callback"
	case BufferMapAsyncStatus_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToBufferMapAsyncStatus(str string) BufferMapAsyncStatus {
	switch str {
	case "success":
		return BufferMapAsyncStatus_Success
	case "error":
		return BufferMapAsyncStatus_Error
	case "unknown":
		return BufferMapAsyncStatus_Unknown
	case "device-lost":
		return BufferMapAsyncStatus_DeviceLost
	case "destroyed-before-callback":
		return BufferMapAsyncStatus_DestroyedBeforeCallback
	case "unmapped-before-callback":
		return BufferMapAsyncStatus_UnmappedBeforeCallback
	case "force32":
		return BufferMapAsyncStatus_Force32
	default:
		panic(fmt.Sprintf("%s convert to BufferMapAsyncStatus error", str))
	}
}

type BufferMapState uint32

const (
	BufferMapState_Unmapped BufferMapState = 0x00000000
	BufferMapState_Pending  BufferMapState = 0x00000001
	BufferMapState_Mapped   BufferMapState = 0x00000002
	BufferMapState_Force32  BufferMapState = 0x7FFFFFFF
)

func (v BufferMapState) String() string {
	switch v {
	case BufferMapState_Unmapped:
		return "unmapped"
	case BufferMapState_Pending:
		return "pending"
	case BufferMapState_Mapped:
		return "mapped"
	case BufferMapState_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToBufferMapState(str string) BufferMapState {
	switch str {
	case "unmapped":
		return BufferMapState_Unmapped
	case "pending":
		return BufferMapState_Pending
	case "mapped":
		return BufferMapState_Mapped
	case "force32":
		return BufferMapState_Force32
	default:
		panic(fmt.Sprintf("%s convert to BufferMapState error", str))
	}
}

type BufferUsage uint32

const (
	BufferUsage_None         BufferUsage = 0x00000000
	BufferUsage_MapRead      BufferUsage = 0x00000001
	BufferUsage_MapWrite     BufferUsage = 0x00000002
	BufferUsage_CopySrc      BufferUsage = 0x00000004
	BufferUsage_CopyDst      BufferUsage = 0x00000008
	BufferUsage_Index        BufferUsage = 0x00000010
	BufferUsage_Vertex       BufferUsage = 0x00000020
	BufferUsage_Uniform      BufferUsage = 0x00000040
	BufferUsage_Storage      BufferUsage = 0x00000080
	BufferUsage_Indirect     BufferUsage = 0x00000100
	BufferUsage_QueryResolve BufferUsage = 0x00000200
	BufferUsage_Force32      BufferUsage = 0x7FFFFFFF
)

func (v BufferUsage) String() string {
	switch v {
	case BufferUsage_None:
		return "none"
	case BufferUsage_MapRead:
		return "map-read"
	case BufferUsage_MapWrite:
		return "map-write"
	case BufferUsage_CopySrc:
		return "copy-src"
	case BufferUsage_CopyDst:
		return "copy-dst"
	case BufferUsage_Index:
		return "index"
	case BufferUsage_Vertex:
		return "vertex"
	case BufferUsage_Uniform:
		return "uniform"
	case BufferUsage_Storage:
		return "storage"
	case BufferUsage_Indirect:
		return "indirect"
	case BufferUsage_QueryResolve:
		return "query-resolve"
	case BufferUsage_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToBufferUsage(str string) BufferUsage {
	switch str {
	case "none":
		return BufferUsage_None
	case "map-read":
		return BufferUsage_MapRead
	case "map-write":
		return BufferUsage_MapWrite
	case "copy-src":
		return BufferUsage_CopySrc
	case "copy-dst":
		return BufferUsage_CopyDst
	case "index":
		return BufferUsage_Index
	case "vertex":
		return BufferUsage_Vertex
	case "uniform":
		return BufferUsage_Uniform
	case "storage":
		return BufferUsage_Storage
	case "indirect":
		return BufferUsage_Indirect
	case "query-resolve":
		return BufferUsage_QueryResolve
	case "force32":
		return BufferUsage_Force32
	default:
		panic(fmt.Sprintf("%s convert to BufferUsage error", str))
	}
}

type ColorWriteMask uint32

const (
	ColorWriteMask_None    ColorWriteMask = 0x00000000
	ColorWriteMask_Red     ColorWriteMask = 0x00000001
	ColorWriteMask_Green   ColorWriteMask = 0x00000002
	ColorWriteMask_Blue    ColorWriteMask = 0x00000004
	ColorWriteMask_Alpha   ColorWriteMask = 0x00000008
	ColorWriteMask_All     ColorWriteMask = 0x0000000F
	ColorWriteMask_Force32 ColorWriteMask = 0x7FFFFFFF
)

func (v ColorWriteMask) String() string {
	switch v {
	case ColorWriteMask_None:
		return "none"
	case ColorWriteMask_Red:
		return "red"
	case ColorWriteMask_Green:
		return "green"
	case ColorWriteMask_Blue:
		return "blue"
	case ColorWriteMask_Alpha:
		return "alpha"
	case ColorWriteMask_All:
		return "all"
	case ColorWriteMask_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToColorWriteMask(str string) ColorWriteMask {
	switch str {
	case "none":
		return ColorWriteMask_None
	case "red":
		return ColorWriteMask_Red
	case "green":
		return ColorWriteMask_Green
	case "blue":
		return ColorWriteMask_Blue
	case "alpha":
		return ColorWriteMask_Alpha
	case "all":
		return ColorWriteMask_All
	case "force32":
		return ColorWriteMask_Force32
	default:
		panic(fmt.Sprintf("%s convert to ColorWriteMask error", str))
	}
}

type CompareFunction uint32

const (
	CompareFunction_Undefined    CompareFunction = 0x00000000
	CompareFunction_Never        CompareFunction = 0x00000001
	CompareFunction_Less         CompareFunction = 0x00000002
	CompareFunction_LessEqual    CompareFunction = 0x00000003
	CompareFunction_Greater      CompareFunction = 0x00000004
	CompareFunction_GreaterEqual CompareFunction = 0x00000005
	CompareFunction_Equal        CompareFunction = 0x00000006
	CompareFunction_NotEqual     CompareFunction = 0x00000007
	CompareFunction_Always       CompareFunction = 0x00000008
	CompareFunction_Force32      CompareFunction = 0x7FFFFFFF
)

func (v CompareFunction) String() string {
	switch v {
	case CompareFunction_Undefined:
		return "undefined"
	case CompareFunction_Never:
		return "never"
	case CompareFunction_Less:
		return "less"
	case CompareFunction_LessEqual:
		return "less-equal"
	case CompareFunction_Greater:
		return "greater"
	case CompareFunction_GreaterEqual:
		return "greater-equal"
	case CompareFunction_Equal:
		return "equal"
	case CompareFunction_NotEqual:
		return "not-equal"
	case CompareFunction_Always:
		return "always"
	case CompareFunction_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToCompareFunction(str string) CompareFunction {
	switch str {
	case "undefined":
		return CompareFunction_Undefined
	case "never":
		return CompareFunction_Never
	case "less":
		return CompareFunction_Less
	case "less-equal":
		return CompareFunction_LessEqual
	case "greater":
		return CompareFunction_Greater
	case "greater-equal":
		return CompareFunction_GreaterEqual
	case "equal":
		return CompareFunction_Equal
	case "not-equal":
		return CompareFunction_NotEqual
	case "always":
		return CompareFunction_Always
	case "force32":
		return CompareFunction_Force32
	default:
		panic(fmt.Sprintf("%s convert to CompareFunction error", str))
	}
}

type CompilationInfoRequestStatus uint32

const (
	CompilationInfoRequestStatus_Success    CompilationInfoRequestStatus = 0x00000000
	CompilationInfoRequestStatus_Error      CompilationInfoRequestStatus = 0x00000001
	CompilationInfoRequestStatus_DeviceLost CompilationInfoRequestStatus = 0x00000002
	CompilationInfoRequestStatus_Unknown    CompilationInfoRequestStatus = 0x00000003
	CompilationInfoRequestStatus_Force32    CompilationInfoRequestStatus = 0x7FFFFFFF
)

func (v CompilationInfoRequestStatus) String() string {
	switch v {
	case CompilationInfoRequestStatus_Success:
		return "success"
	case CompilationInfoRequestStatus_Error:
		return "error"
	case CompilationInfoRequestStatus_DeviceLost:
		return "device-lost"
	case CompilationInfoRequestStatus_Unknown:
		return "unknown"
	case CompilationInfoRequestStatus_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToCompilationInfoRequestStatus(str string) CompilationInfoRequestStatus {
	switch str {
	case "success":
		return CompilationInfoRequestStatus_Success
	case "error":
		return CompilationInfoRequestStatus_Error
	case "device-lost":
		return CompilationInfoRequestStatus_DeviceLost
	case "unknown":
		return CompilationInfoRequestStatus_Unknown
	case "force32":
		return CompilationInfoRequestStatus_Force32
	default:
		panic(fmt.Sprintf("%s convert to CompilationInfoRequestStatus error", str))
	}
}

type CompilationMessageType uint32

const (
	CompilationMessageType_Error   CompilationMessageType = 0x00000000
	CompilationMessageType_Warning CompilationMessageType = 0x00000001
	CompilationMessageType_Info    CompilationMessageType = 0x00000002
	CompilationMessageType_Force32 CompilationMessageType = 0x7FFFFFFF
)

func (v CompilationMessageType) String() string {
	switch v {
	case CompilationMessageType_Error:
		return "error"
	case CompilationMessageType_Warning:
		return "warning"
	case CompilationMessageType_Info:
		return "info"
	case CompilationMessageType_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToCompilationMessageType(str string) CompilationMessageType {
	switch str {
	case "error":
		return CompilationMessageType_Error
	case "warning":
		return CompilationMessageType_Warning
	case "info":
		return CompilationMessageType_Info
	case "force32":
		return CompilationMessageType_Force32
	default:
		panic(fmt.Sprintf("%s convert to CompilationMessageType error", str))
	}
}

type CompositeAlphaMode uint32

const (
	CompositeAlphaMode_Auto           CompositeAlphaMode = 0x00000000
	CompositeAlphaMode_Opaque         CompositeAlphaMode = 0x00000001
	CompositeAlphaMode_PreMultiplied  CompositeAlphaMode = 0x00000002
	CompositeAlphaMode_PostMultiplied CompositeAlphaMode = 0x00000003
	CompositeAlphaMode_Inherit        CompositeAlphaMode = 0x00000004
	CompositeAlphaMode_Force32        CompositeAlphaMode = 0x7FFFFFFF
)

func (v CompositeAlphaMode) String() string {
	switch v {
	case CompositeAlphaMode_Auto:
		return "auto"
	case CompositeAlphaMode_Opaque:
		return "opaque"
	case CompositeAlphaMode_PreMultiplied:
		return "pre-multiplied"
	case CompositeAlphaMode_PostMultiplied:
		return "post-multiplied"
	case CompositeAlphaMode_Inherit:
		return "inherit"
	case CompositeAlphaMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToCompositeAlphaMode(str string) CompositeAlphaMode {
	switch str {
	case "auto":
		return CompositeAlphaMode_Auto
	case "opaque":
		return CompositeAlphaMode_Opaque
	case "pre-multiplied":
		return CompositeAlphaMode_PreMultiplied
	case "post-multiplied":
		return CompositeAlphaMode_PostMultiplied
	case "inherit":
		return CompositeAlphaMode_Inherit
	case "force32":
		return CompositeAlphaMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to CompositeAlphaMode error", str))
	}
}

type ComputePassTimestampLocation uint32

const (
	ComputePassTimestampLocation_Beginning ComputePassTimestampLocation = 0x00000000
	ComputePassTimestampLocation_End       ComputePassTimestampLocation = 0x00000001
	ComputePassTimestampLocation_Force32   ComputePassTimestampLocation = 0x7FFFFFFF
)

func (v ComputePassTimestampLocation) String() string {
	switch v {
	case ComputePassTimestampLocation_Beginning:
		return "beginning"
	case ComputePassTimestampLocation_End:
		return "end"
	case ComputePassTimestampLocation_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToComputePassTimestampLocation(str string) ComputePassTimestampLocation {
	switch str {
	case "beginning":
		return ComputePassTimestampLocation_Beginning
	case "end":
		return ComputePassTimestampLocation_End
	case "force32":
		return ComputePassTimestampLocation_Force32
	default:
		panic(fmt.Sprintf("%s convert to ComputePassTimestampLocation error", str))
	}
}

type CreatePipelineAsyncStatus uint32

const (
	CreatePipelineAsyncStatus_Success         CreatePipelineAsyncStatus = 0x00000000
	CreatePipelineAsyncStatus_ValidationError CreatePipelineAsyncStatus = 0x00000001
	CreatePipelineAsyncStatus_InternalError   CreatePipelineAsyncStatus = 0x00000002
	CreatePipelineAsyncStatus_DeviceLost      CreatePipelineAsyncStatus = 0x00000003
	CreatePipelineAsyncStatus_DeviceDestroyed CreatePipelineAsyncStatus = 0x00000004
	CreatePipelineAsyncStatus_Unknown         CreatePipelineAsyncStatus = 0x00000005
	CreatePipelineAsyncStatus_Force32         CreatePipelineAsyncStatus = 0x7FFFFFFF
)

func (v CreatePipelineAsyncStatus) String() string {
	switch v {
	case CreatePipelineAsyncStatus_Success:
		return "success"
	case CreatePipelineAsyncStatus_ValidationError:
		return "validation-error"
	case CreatePipelineAsyncStatus_InternalError:
		return "internal-error"
	case CreatePipelineAsyncStatus_DeviceLost:
		return "device-lost"
	case CreatePipelineAsyncStatus_DeviceDestroyed:
		return "device-destroyed"
	case CreatePipelineAsyncStatus_Unknown:
		return "unknown"
	case CreatePipelineAsyncStatus_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToCreatePipelineAsyncStatus(str string) CreatePipelineAsyncStatus {
	switch str {
	case "success":
		return CreatePipelineAsyncStatus_Success
	case "validation-error":
		return CreatePipelineAsyncStatus_ValidationError
	case "internal-error":
		return CreatePipelineAsyncStatus_InternalError
	case "device-lost":
		return CreatePipelineAsyncStatus_DeviceLost
	case "device-destroyed":
		return CreatePipelineAsyncStatus_DeviceDestroyed
	case "unknown":
		return CreatePipelineAsyncStatus_Unknown
	case "force32":
		return CreatePipelineAsyncStatus_Force32
	default:
		panic(fmt.Sprintf("%s convert to CreatePipelineAsyncStatus error", str))
	}
}

type CullMode uint32

const (
	CullMode_None    CullMode = 0x00000000
	CullMode_Front   CullMode = 0x00000001
	CullMode_Back    CullMode = 0x00000002
	CullMode_Force32 CullMode = 0x7FFFFFFF
)

func (v CullMode) String() string {
	switch v {
	case CullMode_None:
		return "none"
	case CullMode_Front:
		return "front"
	case CullMode_Back:
		return "back"
	case CullMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToCullMode(str string) CullMode {
	switch str {
	case "none":
		return CullMode_None
	case "front":
		return CullMode_Front
	case "back":
		return CullMode_Back
	case "force32":
		return CullMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to CullMode error", str))
	}
}

type DeviceLostReason uint32

const (
	DeviceLostReason_Undefined DeviceLostReason = 0x00000000
	DeviceLostReason_Destroyed DeviceLostReason = 0x00000001
	DeviceLostReason_Force32   DeviceLostReason = 0x7FFFFFFF
)

func (v DeviceLostReason) String() string {
	switch v {
	case DeviceLostReason_Undefined:
		return "undefined"
	case DeviceLostReason_Destroyed:
		return "destroyed"
	case DeviceLostReason_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToDeviceLostReason(str string) DeviceLostReason {
	switch str {
	case "undefined":
		return DeviceLostReason_Undefined
	case "destroyed":
		return DeviceLostReason_Destroyed
	case "force32":
		return DeviceLostReason_Force32
	default:
		panic(fmt.Sprintf("%s convert to DeviceLostReason error", str))
	}
}

type Dx12Compiler uint32

const (
	Dx12Compiler_Undefined Dx12Compiler = 0x00000000
	Dx12Compiler_Fxc       Dx12Compiler = 0x00000001
	Dx12Compiler_Dxc       Dx12Compiler = 0x00000002
	Dx12Compiler_Force32   Dx12Compiler = 0x7FFFFFFF
)

func (v Dx12Compiler) String() string {
	switch v {
	case Dx12Compiler_Undefined:
		return "undefined"
	case Dx12Compiler_Fxc:
		return "fxc"
	case Dx12Compiler_Dxc:
		return "dxc"
	case Dx12Compiler_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToDx12Compiler(str string) Dx12Compiler {
	switch str {
	case "undefined":
		return Dx12Compiler_Undefined
	case "fxc":
		return Dx12Compiler_Fxc
	case "dxc":
		return Dx12Compiler_Dxc
	case "force32":
		return Dx12Compiler_Force32
	default:
		panic(fmt.Sprintf("%s convert to Dx12Compiler error", str))
	}
}

type ErrorFilter uint32

const (
	ErrorFilter_Validation  ErrorFilter = 0x00000000
	ErrorFilter_OutOfMemory ErrorFilter = 0x00000001
	ErrorFilter_Internal    ErrorFilter = 0x00000002
	ErrorFilter_Force32     ErrorFilter = 0x7FFFFFFF
)

func (v ErrorFilter) String() string {
	switch v {
	case ErrorFilter_Validation:
		return "validation"
	case ErrorFilter_OutOfMemory:
		return "out-of-memory"
	case ErrorFilter_Internal:
		return "internal"
	case ErrorFilter_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToErrorFilter(str string) ErrorFilter {
	switch str {
	case "validation":
		return ErrorFilter_Validation
	case "out-of-memory":
		return ErrorFilter_OutOfMemory
	case "internal":
		return ErrorFilter_Internal
	case "force32":
		return ErrorFilter_Force32
	default:
		panic(fmt.Sprintf("%s convert to ErrorFilter error", str))
	}
}

type ErrorType uint32

const (
	ErrorType_NoError     ErrorType = 0x00000000
	ErrorType_Validation  ErrorType = 0x00000001
	ErrorType_OutOfMemory ErrorType = 0x00000002
	ErrorType_Internal    ErrorType = 0x00000003
	ErrorType_Unknown     ErrorType = 0x00000004
	ErrorType_DeviceLost  ErrorType = 0x00000005
	ErrorType_Force32     ErrorType = 0x7FFFFFFF
)

func (v ErrorType) String() string {
	switch v {
	case ErrorType_NoError:
		return "no-error"
	case ErrorType_Validation:
		return "validation"
	case ErrorType_OutOfMemory:
		return "out-of-memory"
	case ErrorType_Internal:
		return "internal"
	case ErrorType_Unknown:
		return "unknown"
	case ErrorType_DeviceLost:
		return "device-lost"
	case ErrorType_Force32:
		return "force32"
	default:
		return "unknown"
	}
}
func StringToErrorType(str string) ErrorType {
	switch str {
	case "no-error":
		return ErrorType_NoError
	case "validation":
		return ErrorType_Validation
	case "out-of-memory":
		return ErrorType_OutOfMemory
	case "internal":
		return ErrorType_Internal
	case "unknown":
		return ErrorType_Unknown
	case "device-lost":
		return ErrorType_DeviceLost
	case "force32":
		return ErrorType_Force32
	default:
		return ErrorType_Unknown
	}
}

type FeatureName uint32

const (
	FeatureName_Undefined                              FeatureName = 0x00000000
	FeatureName_DepthClipControl                       FeatureName = 0x00000001
	FeatureName_Depth32FloatStencil8                   FeatureName = 0x00000002
	FeatureName_TimestampQuery                         FeatureName = 0x00000003
	FeatureName_PipelineStatisticsQuery                FeatureName = 0x00000004
	FeatureName_TextureCompressionBC                   FeatureName = 0x00000005
	FeatureName_TextureCompressionETC2                 FeatureName = 0x00000006
	FeatureName_TextureCompressionASTC                 FeatureName = 0x00000007
	FeatureName_IndirectFirstInstance                  FeatureName = 0x00000008
	FeatureName_ShaderF16                              FeatureName = 0x00000009
	FeatureName_RG11B10UfloatRenderable                FeatureName = 0x0000000A
	FeatureName_BGRA8UnormStorage                      FeatureName = 0x0000000B
	FeatureName_Float32Filterable                      FeatureName = 0x0000000C
	NativeFeature_PushConstants                        FeatureName = 0x60000001
	NativeFeature_TextureAdapterSpecificFormatFeatures FeatureName = 0x60000002
	NativeFeature_MultiDrawIndirect                    FeatureName = 0x60000003
	NativeFeature_MultiDrawIndirectCount               FeatureName = 0x60000004
	NativeFeature_VertexWritableStorage                FeatureName = 0x60000005
)

func (v FeatureName) String() string {
	switch v {
	case FeatureName_Undefined:
		return "Undefined"
	case FeatureName_DepthClipControl:
		return "DepthClipControl"
	case FeatureName_Depth32FloatStencil8:
		return "Depth32FloatStencil8"
	case FeatureName_TimestampQuery:
		return "TimestampQuery"
	case FeatureName_PipelineStatisticsQuery:
		return "PipelineStatisticsQuery"
	case FeatureName_TextureCompressionBC:
		return "TextureCompressionBC"
	case FeatureName_TextureCompressionETC2:
		return "TextureCompressionETC2"
	case FeatureName_TextureCompressionASTC:
		return "TextureCompressionASTC"
	case FeatureName_IndirectFirstInstance:
		return "IndirectFirstInstance"
	case FeatureName_ShaderF16:
		return "ShaderF16"
	case FeatureName_RG11B10UfloatRenderable:
		return "RG11B10UfloatRenderable"
	case FeatureName_BGRA8UnormStorage:
		return "BGRA8UnormStorage"
	case FeatureName_Float32Filterable:
		return "Float32Filterable"
	case NativeFeature_PushConstants:
		return "NativeFeature_PushConstants"
	case NativeFeature_TextureAdapterSpecificFormatFeatures:
		return "NativeFeature_TextureAdapterSpecificFormatFeatures"
	case NativeFeature_MultiDrawIndirect:
		return "NativeFeature_MultiDrawIndirect"
	case NativeFeature_MultiDrawIndirectCount:
		return "NativeFeature_MultiDrawIndirectCount"
	case NativeFeature_VertexWritableStorage:
		return "NativeFeature_VertexWritableStorage"
	default:
		return ""
	}
}

type FilterMode uint32

const (
	FilterMode_Nearest FilterMode = 0x00000000
	FilterMode_Linear  FilterMode = 0x00000001
	FilterMode_Force32 FilterMode = 0x7FFFFFFF
)

func (v FilterMode) String() string {
	switch v {
	case FilterMode_Nearest:
		return "nearest"
	case FilterMode_Linear:
		return "linear"
	case FilterMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToFilterMode(str string) FilterMode {
	switch str {
	case "nearest":
		return FilterMode_Nearest
	case "linear":
		return FilterMode_Linear
	case "force32":
		return FilterMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to FilterMode error", str))
	}
}

type FrontFace uint32

const (
	FrontFace_CCW     FrontFace = 0x00000000
	FrontFace_CW      FrontFace = 0x00000001
	FrontFace_Force32 FrontFace = 0x7FFFFFFF
)

func (v FrontFace) String() string {
	switch v {
	case FrontFace_CCW:
		return "ccw"
	case FrontFace_CW:
		return "cw"
	case FrontFace_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToFrontFace(str string) FrontFace {
	switch str {
	case "ccw":
		return FrontFace_CCW
	case "cw":
		return FrontFace_CW
	case "force32":
		return FrontFace_Force32
	default:
		panic(fmt.Sprintf("%s convert to FrontFace error", str))
	}
}

type IndexFormat uint32

const (
	IndexFormat_Undefined IndexFormat = 0x00000000
	IndexFormat_Uint16    IndexFormat = 0x00000001
	IndexFormat_Uint32    IndexFormat = 0x00000002
	IndexFormat_Force32   IndexFormat = 0x7FFFFFFF
)

func (v IndexFormat) String() string {
	switch v {
	case IndexFormat_Undefined:
		return "undefined"
	case IndexFormat_Uint16:
		return "uint16"
	case IndexFormat_Uint32:
		return "uint32"
	case IndexFormat_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToIndexFormat(str string) IndexFormat {
	switch str {
	case "undefined":
		return IndexFormat_Undefined
	case "uint16":
		return IndexFormat_Uint16
	case "uint32":
		return IndexFormat_Uint32
	case "force32":
		return IndexFormat_Force32
	default:
		panic(fmt.Sprintf("%s convert to IndexFormat error", str))
	}
}

type InstanceBackend uint32

const (
	InstanceBackend_None    InstanceBackend = 0x00000000
	InstanceBackend_Force32 InstanceBackend = 0x7FFFFFFF
)

func (v InstanceBackend) String() string {
	switch v {
	case InstanceBackend_None:
		return "none"
	case InstanceBackend_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToInstanceBackend(str string) InstanceBackend {
	switch str {
	case "none":
		return InstanceBackend_None
	case "force32":
		return InstanceBackend_Force32
	default:
		panic(fmt.Sprintf("%s convert to InstanceBackend error", str))
	}
}

type LoadOp uint32

const (
	LoadOp_Undefined LoadOp = 0x00000000
	LoadOp_Clear     LoadOp = 0x00000001
	LoadOp_Load      LoadOp = 0x00000002
	LoadOp_Force32   LoadOp = 0x7FFFFFFF
)

func (v LoadOp) String() string {
	switch v {
	case LoadOp_Undefined:
		return "undefined"
	case LoadOp_Clear:
		return "clear"
	case LoadOp_Load:
		return "load"
	case LoadOp_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToLoadOp(str string) LoadOp {
	switch str {
	case "undefined":
		return LoadOp_Undefined
	case "clear":
		return LoadOp_Clear
	case "load":
		return LoadOp_Load
	case "force32":
		return LoadOp_Force32
	default:
		panic(fmt.Sprintf("%s convert to LoadOp error", str))
	}
}

type LogLevel uint32

const (
	LogLevel_Off     LogLevel = 0x00000000
	LogLevel_Error   LogLevel = 0x00000001
	LogLevel_Warn    LogLevel = 0x00000002
	LogLevel_Info    LogLevel = 0x00000003
	LogLevel_Debug   LogLevel = 0x00000004
	LogLevel_Trace   LogLevel = 0x00000005
	LogLevel_Force32 LogLevel = 0x7FFFFFFF
)

func (v LogLevel) String() string {
	switch v {
	case LogLevel_Off:
		return "off"
	case LogLevel_Error:
		return "error"
	case LogLevel_Warn:
		return "warn"
	case LogLevel_Info:
		return "info"
	case LogLevel_Debug:
		return "debug"
	case LogLevel_Trace:
		return "trace"
	case LogLevel_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToLogLevel(str string) LogLevel {
	switch str {
	case "off":
		return LogLevel_Off
	case "error":
		return LogLevel_Error
	case "warn":
		return LogLevel_Warn
	case "info":
		return LogLevel_Info
	case "debug":
		return LogLevel_Debug
	case "trace":
		return LogLevel_Trace
	case "force32":
		return LogLevel_Force32
	default:
		panic(fmt.Sprintf("%s convert to LogLevel error", str))
	}
}

type MapMode uint32

const (
	MapMode_None    MapMode = 0x00000000
	MapMode_Read    MapMode = 0x00000001
	MapMode_Write   MapMode = 0x00000002
	MapMode_Force32 MapMode = 0x7FFFFFFF
)

func (v MapMode) String() string {
	switch v {
	case MapMode_None:
		return "none"
	case MapMode_Read:
		return "read"
	case MapMode_Write:
		return "write"
	case MapMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToMapMode(str string) MapMode {
	switch str {
	case "none":
		return MapMode_None
	case "read":
		return MapMode_Read
	case "write":
		return MapMode_Write
	case "force32":
		return MapMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to MapMode error", str))
	}
}

type MipmapFilterMode uint32

const (
	MipmapFilterMode_Nearest MipmapFilterMode = 0x00000000
	MipmapFilterMode_Linear  MipmapFilterMode = 0x00000001
	MipmapFilterMode_Force32 MipmapFilterMode = 0x7FFFFFFF
)

func (v MipmapFilterMode) String() string {
	switch v {
	case MipmapFilterMode_Nearest:
		return "nearest"
	case MipmapFilterMode_Linear:
		return "linear"
	case MipmapFilterMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToMipmapFilterMode(str string) MipmapFilterMode {
	switch str {
	case "nearest":
		return MipmapFilterMode_Nearest
	case "linear":
		return MipmapFilterMode_Linear
	case "force32":
		return MipmapFilterMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to MipmapFilterMode error", str))
	}
}

type PipelineStatisticName uint32

const (
	PipelineStatisticName_VertexShaderInvocations   PipelineStatisticName = 0x00000000
	PipelineStatisticName_ClipperInvocations        PipelineStatisticName = 0x00000001
	PipelineStatisticName_ClipperPrimitivesOut      PipelineStatisticName = 0x00000002
	PipelineStatisticName_FragmentShaderInvocations PipelineStatisticName = 0x00000003
	PipelineStatisticName_ComputeShaderInvocations  PipelineStatisticName = 0x00000004
	PipelineStatisticName_Force32                   PipelineStatisticName = 0x7FFFFFFF
)

func (v PipelineStatisticName) String() string {
	switch v {
	case PipelineStatisticName_VertexShaderInvocations:
		return "vertex-shader-invocations"
	case PipelineStatisticName_ClipperInvocations:
		return "clipper-invocations"
	case PipelineStatisticName_ClipperPrimitivesOut:
		return "clipper-primitives-out"
	case PipelineStatisticName_FragmentShaderInvocations:
		return "fragment-shader-invocations"
	case PipelineStatisticName_ComputeShaderInvocations:
		return "compute-shader-invocations"
	case PipelineStatisticName_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToPipelineStatisticName(str string) PipelineStatisticName {
	switch str {
	case "vertex-shader-invocations":
		return PipelineStatisticName_VertexShaderInvocations
	case "clipper-invocations":
		return PipelineStatisticName_ClipperInvocations
	case "clipper-primitives-out":
		return PipelineStatisticName_ClipperPrimitivesOut
	case "fragment-shader-invocations":
		return PipelineStatisticName_FragmentShaderInvocations
	case "compute-shader-invocations":
		return PipelineStatisticName_ComputeShaderInvocations
	case "force32":
		return PipelineStatisticName_Force32
	default:
		panic(fmt.Sprintf("%s convert to PipelineStatisticName error", str))
	}
}

type PowerPreference uint32

const (
	PowerPreference_Undefined       PowerPreference = 0x00000000
	PowerPreference_LowPower        PowerPreference = 0x00000001
	PowerPreference_HighPerformance PowerPreference = 0x00000002
	PowerPreference_Force32         PowerPreference = 0x7FFFFFFF
)

func (v PowerPreference) String() string {
	switch v {
	case PowerPreference_Undefined:
		return "default"
	case PowerPreference_LowPower:
		return "low-power"
	case PowerPreference_HighPerformance:
		return "high-performance"
	case PowerPreference_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToPowerPreference(str string) PowerPreference {
	switch str {
	case "default":
		return PowerPreference_Undefined
	case "low-power":
		return PowerPreference_LowPower
	case "high-performance":
		return PowerPreference_HighPerformance
	case "force32":
		return PowerPreference_Force32
	default:
		panic(fmt.Sprintf("%s convert to PowerPreference error", str))
	}
}

type PresentMode uint32

const (
	PresentMode_Immediate PresentMode = 0x00000000
	PresentMode_Mailbox   PresentMode = 0x00000001
	PresentMode_Fifo      PresentMode = 0x00000002
	PresentMode_Force32   PresentMode = 0x7FFFFFFF
)

func (v PresentMode) String() string {
	switch v {
	case PresentMode_Immediate:
		return "immediate"
	case PresentMode_Mailbox:
		return "mailbox"
	case PresentMode_Fifo:
		return "fifo"
	case PresentMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToPresentMode(str string) PresentMode {
	switch str {
	case "immediate":
		return PresentMode_Immediate
	case "mailbox":
		return PresentMode_Mailbox
	case "fifo":
		return PresentMode_Fifo
	case "force32":
		return PresentMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to PresentMode error", str))
	}
}

type PrimitiveTopology uint32

const (
	PrimitiveTopology_PointList     PrimitiveTopology = 0x00000000
	PrimitiveTopology_LineList      PrimitiveTopology = 0x00000001
	PrimitiveTopology_LineStrip     PrimitiveTopology = 0x00000002
	PrimitiveTopology_TriangleList  PrimitiveTopology = 0x00000003
	PrimitiveTopology_TriangleStrip PrimitiveTopology = 0x00000004
	PrimitiveTopology_Force32       PrimitiveTopology = 0x7FFFFFFF
)

func (v PrimitiveTopology) String() string {
	switch v {
	case PrimitiveTopology_PointList:
		return "point-list"
	case PrimitiveTopology_LineList:
		return "line-list"
	case PrimitiveTopology_LineStrip:
		return "line-strip"
	case PrimitiveTopology_TriangleList:
		return "triangle-list"
	case PrimitiveTopology_TriangleStrip:
		return "triangle-strip"
	case PrimitiveTopology_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToPrimitiveTopology(str string) PrimitiveTopology {
	switch str {
	case "point-list":
		return PrimitiveTopology_PointList
	case "line-list":
		return PrimitiveTopology_LineList
	case "line-strip":
		return PrimitiveTopology_LineStrip
	case "triangle-list":
		return PrimitiveTopology_TriangleList
	case "triangle-strip":
		return PrimitiveTopology_TriangleStrip
	case "force32":
		return PrimitiveTopology_Force32
	default:
		panic(fmt.Sprintf("%s convert to PrimitiveTopology error", str))
	}
}

type QueryType uint32

const (
	QueryType_Occlusion          QueryType = 0x00000000
	QueryType_PipelineStatistics QueryType = 0x00000001
	QueryType_Timestamp          QueryType = 0x00000002
	QueryType_Force32            QueryType = 0x7FFFFFFF
)

func (v QueryType) String() string {
	switch v {
	case QueryType_Occlusion:
		return "occlusion"
	case QueryType_PipelineStatistics:
		return "pipeline-statistics"
	case QueryType_Timestamp:
		return "timestamp"
	case QueryType_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToQueryType(str string) QueryType {
	switch str {
	case "occlusion":
		return QueryType_Occlusion
	case "pipeline-statistics":
		return QueryType_PipelineStatistics
	case "timestamp":
		return QueryType_Timestamp
	case "force32":
		return QueryType_Force32
	default:
		panic(fmt.Sprintf("%s convert to QueryType error", str))
	}
}

type QueueWorkDoneStatus uint32

const (
	QueueWorkDoneStatus_Success    QueueWorkDoneStatus = 0x00000000
	QueueWorkDoneStatus_Error      QueueWorkDoneStatus = 0x00000001
	QueueWorkDoneStatus_Unknown    QueueWorkDoneStatus = 0x00000002
	QueueWorkDoneStatus_DeviceLost QueueWorkDoneStatus = 0x00000003
	QueueWorkDoneStatus_Force32    QueueWorkDoneStatus = 0x7FFFFFFF
)

func (v QueueWorkDoneStatus) String() string {
	switch v {
	case QueueWorkDoneStatus_Success:
		return "success"
	case QueueWorkDoneStatus_Error:
		return "error"
	case QueueWorkDoneStatus_Unknown:
		return "unknown"
	case QueueWorkDoneStatus_DeviceLost:
		return "device-lost"
	case QueueWorkDoneStatus_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToQueueWorkDoneStatus(str string) QueueWorkDoneStatus {
	switch str {
	case "success":
		return QueueWorkDoneStatus_Success
	case "error":
		return QueueWorkDoneStatus_Error
	case "unknown":
		return QueueWorkDoneStatus_Unknown
	case "device-lost":
		return QueueWorkDoneStatus_DeviceLost
	case "force32":
		return QueueWorkDoneStatus_Force32
	default:
		panic(fmt.Sprintf("%s convert to QueueWorkDoneStatus error", str))
	}
}

type RenderPassTimestampLocation uint32

const (
	RenderPassTimestampLocation_Beginning RenderPassTimestampLocation = 0x00000000
	RenderPassTimestampLocation_End       RenderPassTimestampLocation = 0x00000001
	RenderPassTimestampLocation_Force32   RenderPassTimestampLocation = 0x7FFFFFFF
)

func (v RenderPassTimestampLocation) String() string {
	switch v {
	case RenderPassTimestampLocation_Beginning:
		return "beginning"
	case RenderPassTimestampLocation_End:
		return "end"
	case RenderPassTimestampLocation_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToRenderPassTimestampLocation(str string) RenderPassTimestampLocation {
	switch str {
	case "beginning":
		return RenderPassTimestampLocation_Beginning
	case "end":
		return RenderPassTimestampLocation_End
	case "force32":
		return RenderPassTimestampLocation_Force32
	default:
		panic(fmt.Sprintf("%s convert to RenderPassTimestampLocation error", str))
	}
}

type RequestAdapterStatus uint32

const (
	RequestAdapterStatus_Success     RequestAdapterStatus = 0x00000000
	RequestAdapterStatus_Unavailable RequestAdapterStatus = 0x00000001
	RequestAdapterStatus_Error       RequestAdapterStatus = 0x00000002
	RequestAdapterStatus_Unknown     RequestAdapterStatus = 0x00000003
	RequestAdapterStatus_Force32     RequestAdapterStatus = 0x7FFFFFFF
)

func (v RequestAdapterStatus) String() string {
	switch v {
	case RequestAdapterStatus_Success:
		return "success"
	case RequestAdapterStatus_Unavailable:
		return "unavailable"
	case RequestAdapterStatus_Error:
		return "error"
	case RequestAdapterStatus_Unknown:
		return "unknown"
	case RequestAdapterStatus_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToRequestAdapterStatus(str string) RequestAdapterStatus {
	switch str {
	case "success":
		return RequestAdapterStatus_Success
	case "unavailable":
		return RequestAdapterStatus_Unavailable
	case "error":
		return RequestAdapterStatus_Error
	case "unknown":
		return RequestAdapterStatus_Unknown
	case "force32":
		return RequestAdapterStatus_Force32
	default:
		panic(fmt.Sprintf("%s convert to RequestAdapterStatus error", str))
	}
}

type RequestDeviceStatus uint32

const (
	RequestDeviceStatus_Success RequestDeviceStatus = 0x00000000
	RequestDeviceStatus_Error   RequestDeviceStatus = 0x00000001
	RequestDeviceStatus_Unknown RequestDeviceStatus = 0x00000002
	RequestDeviceStatus_Force32 RequestDeviceStatus = 0x7FFFFFFF
)

func (v RequestDeviceStatus) String() string {
	switch v {
	case RequestDeviceStatus_Success:
		return "success"
	case RequestDeviceStatus_Error:
		return "error"
	case RequestDeviceStatus_Unknown:
		return "unknown"
	case RequestDeviceStatus_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToRequestDeviceStatus(str string) RequestDeviceStatus {
	switch str {
	case "success":
		return RequestDeviceStatus_Success
	case "error":
		return RequestDeviceStatus_Error
	case "unknown":
		return RequestDeviceStatus_Unknown
	case "force32":
		return RequestDeviceStatus_Force32
	default:
		panic(fmt.Sprintf("%s convert to RequestDeviceStatus error", str))
	}
}

type SamplerBindingType uint32

const (
	SamplerBindingType_Undefined    SamplerBindingType = 0x00000000
	SamplerBindingType_Filtering    SamplerBindingType = 0x00000001
	SamplerBindingType_NonFiltering SamplerBindingType = 0x00000002
	SamplerBindingType_Comparison   SamplerBindingType = 0x00000003
)

func (v SamplerBindingType) String() string {
	switch v {
	case SamplerBindingType_Undefined:
		return "undefined"
	case SamplerBindingType_Filtering:
		return "filtering"
	case SamplerBindingType_NonFiltering:
		return "non-filtering"
	case SamplerBindingType_Comparison:
		return "comparison"
	default:
		return ""
	}
}
func StringToSamplerBindingType(str string) SamplerBindingType {
	switch str {
	case "undefined":
		return SamplerBindingType_Undefined
	case "filtering":
		return SamplerBindingType_Filtering
	case "non-filtering":
		return SamplerBindingType_NonFiltering
	case "comparison":
		return SamplerBindingType_Comparison
	default:
		panic(fmt.Sprintf("%s convert to SamplerBindingType error", str))
	}
}

type ShaderStage uint32

const (
	ShaderStage_None     ShaderStage = 0x00000000
	ShaderStage_Vertex   ShaderStage = 0x00000001
	ShaderStage_Fragment ShaderStage = 0x00000002
	ShaderStage_Compute  ShaderStage = 0x00000004
)

func (v ShaderStage) String() string {
	switch v {
	case ShaderStage_None:
		return "None"
	case ShaderStage_Vertex:
		return "Vertex"
	case ShaderStage_Fragment:
		return "Fragment"
	case ShaderStage_Compute:
		return "Compute"
	default:
		return ""
	}
}
func StringToShaderStage(str string) ShaderStage {
	switch str {
	case "none":
		return ShaderStage_None
	case "vertex":
		return ShaderStage_Vertex
	case "fragment":
		return ShaderStage_Fragment
	case "compute":
		return ShaderStage_Compute
	default:
		panic(fmt.Sprintf("%s convert to ShaderStage error", str))
	}
}

type StencilOperation uint32

const (
	StencilOperation_Keep           StencilOperation = 0x00000000
	StencilOperation_Zero           StencilOperation = 0x00000001
	StencilOperation_Replace        StencilOperation = 0x00000002
	StencilOperation_Invert         StencilOperation = 0x00000003
	StencilOperation_IncrementClamp StencilOperation = 0x00000004
	StencilOperation_DecrementClamp StencilOperation = 0x00000005
	StencilOperation_IncrementWrap  StencilOperation = 0x00000006
	StencilOperation_DecrementWrap  StencilOperation = 0x00000007
	StencilOperation_Force32        StencilOperation = 0x7FFFFFFF
)

func (v StencilOperation) String() string {
	switch v {
	case StencilOperation_Keep:
		return "keep"
	case StencilOperation_Zero:
		return "zero"
	case StencilOperation_Replace:
		return "replace"
	case StencilOperation_Invert:
		return "invert"
	case StencilOperation_IncrementClamp:
		return "increment-clamp"
	case StencilOperation_DecrementClamp:
		return "decrement-clamp"
	case StencilOperation_IncrementWrap:
		return "increment-wrap"
	case StencilOperation_DecrementWrap:
		return "decrement-wrap"
	case StencilOperation_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToStencilOperation(str string) StencilOperation {
	switch str {
	case "keep":
		return StencilOperation_Keep
	case "zero":
		return StencilOperation_Zero
	case "replace":
		return StencilOperation_Replace
	case "invert":
		return StencilOperation_Invert
	case "increment-clamp":
		return StencilOperation_IncrementClamp
	case "decrement-clamp":
		return StencilOperation_DecrementClamp
	case "increment-wrap":
		return StencilOperation_IncrementWrap
	case "decrement-wrap":
		return StencilOperation_DecrementWrap
	case "force32":
		return StencilOperation_Force32
	default:
		panic(fmt.Sprintf("%s convert to StencilOperation error", str))
	}
}

type StorageTextureAccess uint32

const (
	StorageTextureAccess_Undefined StorageTextureAccess = 0x00000000
	StorageTextureAccess_WriteOnly StorageTextureAccess = 0x00000001
)

func (v StorageTextureAccess) String() string {
	switch v {
	case StorageTextureAccess_Undefined:
		return "undefined"
	case StorageTextureAccess_WriteOnly:
		return "write-only"
	default:
		return ""
	}
}
func StringToStorageTextureAccess(str string) StorageTextureAccess {
	switch str {
	case "undefined":
		return StorageTextureAccess_Undefined
	case "write-only":
		return StorageTextureAccess_WriteOnly
	default:
		panic(fmt.Sprintf("%s convert to StorageTextureAccess error", str))
	}
}

type StoreOp uint32

const (
	StoreOp_Undefined StoreOp = 0x00000000
	StoreOp_Store     StoreOp = 0x00000001
	StoreOp_Discard   StoreOp = 0x00000002
	StoreOp_Force32   StoreOp = 0x7FFFFFFF
)

func (v StoreOp) String() string {
	switch v {
	case StoreOp_Undefined:
		return "undefined"
	case StoreOp_Store:
		return "store"
	case StoreOp_Discard:
		return "discard"
	case StoreOp_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToStoreOp(str string) StoreOp {
	switch str {
	case "undefined":
		return StoreOp_Undefined
	case "store":
		return StoreOp_Store
	case "discard":
		return StoreOp_Discard
	case "force32":
		return StoreOp_Force32
	default:
		panic(fmt.Sprintf("%s convert to StoreOp error", str))
	}
}

type TextureAspect uint32

const (
	TextureAspect_All         TextureAspect = 0x00000000
	TextureAspect_StencilOnly TextureAspect = 0x00000001
	TextureAspect_DepthOnly   TextureAspect = 0x00000002
	TextureAspect_Force32     TextureAspect = 0x7FFFFFFF
)

func (v TextureAspect) String() string {
	switch v {
	case TextureAspect_All:
		return "all"
	case TextureAspect_StencilOnly:
		return "stencil-only"
	case TextureAspect_DepthOnly:
		return "depth-only"
	case TextureAspect_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToTextureAspect(str string) TextureAspect {
	switch str {
	case "all":
		return TextureAspect_All
	case "stencil-only":
		return TextureAspect_StencilOnly
	case "depth-only":
		return TextureAspect_DepthOnly
	case "force32":
		return TextureAspect_Force32
	default:
		panic(fmt.Sprintf("%s convert to TextureAspect error", str))
	}
}

type TextureComponentType uint32

const (
	TextureComponentType_Float           TextureComponentType = 0x00000000
	TextureComponentType_Sint            TextureComponentType = 0x00000001
	TextureComponentType_Uint            TextureComponentType = 0x00000002
	TextureComponentType_DepthComparison TextureComponentType = 0x00000003
	TextureComponentType_Force32         TextureComponentType = 0x7FFFFFFF
)

func (v TextureComponentType) String() string {
	switch v {
	case TextureComponentType_Float:
		return "float"
	case TextureComponentType_Sint:
		return "sint"
	case TextureComponentType_Uint:
		return "uint"
	case TextureComponentType_DepthComparison:
		return "depth-comparison"
	case TextureComponentType_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToTextureComponentType(str string) TextureComponentType {
	switch str {
	case "float":
		return TextureComponentType_Float
	case "sint":
		return TextureComponentType_Sint
	case "uint":
		return TextureComponentType_Uint
	case "depth-comparison":
		return TextureComponentType_DepthComparison
	case "force32":
		return TextureComponentType_Force32
	default:
		panic(fmt.Sprintf("%s convert to TextureComponentType error", str))
	}
}

type TextureDimension uint32

const (
	TextureDimension_1D      TextureDimension = 0x00000000
	TextureDimension_2D      TextureDimension = 0x00000001
	TextureDimension_3D      TextureDimension = 0x00000002
	TextureDimension_Force32 TextureDimension = 0x7FFFFFFF
)

func (v TextureDimension) String() string {
	switch v {
	case TextureDimension_1D:
		return "1d"
	case TextureDimension_2D:
		return "2d"
	case TextureDimension_3D:
		return "3d"
	case TextureDimension_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToTextureDimension(str string) TextureDimension {
	switch str {
	case "1d":
		return TextureDimension_1D
	case "2d":
		return TextureDimension_2D
	case "3d":
		return TextureDimension_3D
	case "force32":
		return TextureDimension_Force32
	default:
		panic(fmt.Sprintf("%s convert to TextureDimension error", str))
	}
}

type TextureFormat uint32

const (
	TextureFormat_Undefined            TextureFormat = 0x00000000
	TextureFormat_R8Unorm              TextureFormat = 0x00000001
	TextureFormat_R8Snorm              TextureFormat = 0x00000002
	TextureFormat_R8Uint               TextureFormat = 0x00000003
	TextureFormat_R8Sint               TextureFormat = 0x00000004
	TextureFormat_R16Uint              TextureFormat = 0x00000005
	TextureFormat_R16Sint              TextureFormat = 0x00000006
	TextureFormat_R16Float             TextureFormat = 0x00000007
	TextureFormat_RG8Unorm             TextureFormat = 0x00000008
	TextureFormat_RG8Snorm             TextureFormat = 0x00000009
	TextureFormat_RG8Uint              TextureFormat = 0x0000000A
	TextureFormat_RG8Sint              TextureFormat = 0x0000000B
	TextureFormat_R32Float             TextureFormat = 0x0000000C
	TextureFormat_R32Uint              TextureFormat = 0x0000000D
	TextureFormat_R32Sint              TextureFormat = 0x0000000E
	TextureFormat_RG16Uint             TextureFormat = 0x0000000F
	TextureFormat_RG16Sint             TextureFormat = 0x00000010
	TextureFormat_RG16Float            TextureFormat = 0x00000011
	TextureFormat_RGBA8Unorm           TextureFormat = 0x00000012
	TextureFormat_RGBA8UnormSrgb       TextureFormat = 0x00000013
	TextureFormat_RGBA8Snorm           TextureFormat = 0x00000014
	TextureFormat_RGBA8Uint            TextureFormat = 0x00000015
	TextureFormat_RGBA8Sint            TextureFormat = 0x00000016
	TextureFormat_BGRA8Unorm           TextureFormat = 0x00000017
	TextureFormat_BGRA8UnormSrgb       TextureFormat = 0x00000018
	TextureFormat_RGB10A2Unorm         TextureFormat = 0x00000019
	TextureFormat_RG11B10Ufloat        TextureFormat = 0x0000001A
	TextureFormat_RGB9E5Ufloat         TextureFormat = 0x0000001B
	TextureFormat_RG32Float            TextureFormat = 0x0000001C
	TextureFormat_RG32Uint             TextureFormat = 0x0000001D
	TextureFormat_RG32Sint             TextureFormat = 0x0000001E
	TextureFormat_RGBA16Uint           TextureFormat = 0x0000001F
	TextureFormat_RGBA16Sint           TextureFormat = 0x00000020
	TextureFormat_RGBA16Float          TextureFormat = 0x00000021
	TextureFormat_RGBA32Float          TextureFormat = 0x00000022
	TextureFormat_RGBA32Uint           TextureFormat = 0x00000023
	TextureFormat_RGBA32Sint           TextureFormat = 0x00000024
	TextureFormat_Stencil8             TextureFormat = 0x00000025
	TextureFormat_Depth16Unorm         TextureFormat = 0x00000026
	TextureFormat_Depth24Plus          TextureFormat = 0x00000027
	TextureFormat_Depth24PlusStencil8  TextureFormat = 0x00000028
	TextureFormat_Depth32Float         TextureFormat = 0x00000029
	TextureFormat_Depth32FloatStencil8 TextureFormat = 0x0000002A
	TextureFormat_BC1RGBAUnorm         TextureFormat = 0x0000002B
	TextureFormat_BC1RGBAUnormSrgb     TextureFormat = 0x0000002C
	TextureFormat_BC2RGBAUnorm         TextureFormat = 0x0000002D
	TextureFormat_BC2RGBAUnormSrgb     TextureFormat = 0x0000002E
	TextureFormat_BC3RGBAUnorm         TextureFormat = 0x0000002F
	TextureFormat_BC3RGBAUnormSrgb     TextureFormat = 0x00000030
	TextureFormat_BC4RUnorm            TextureFormat = 0x00000031
	TextureFormat_BC4RSnorm            TextureFormat = 0x00000032
	TextureFormat_BC5RGUnorm           TextureFormat = 0x00000033
	TextureFormat_BC5RGSnorm           TextureFormat = 0x00000034
	TextureFormat_BC6HRGBUfloat        TextureFormat = 0x00000035
	TextureFormat_BC6HRGBFloat         TextureFormat = 0x00000036
	TextureFormat_BC7RGBAUnorm         TextureFormat = 0x00000037
	TextureFormat_BC7RGBAUnormSrgb     TextureFormat = 0x00000038
	TextureFormat_ETC2RGB8Unorm        TextureFormat = 0x00000039
	TextureFormat_ETC2RGB8UnormSrgb    TextureFormat = 0x0000003A
	TextureFormat_ETC2RGB8A1Unorm      TextureFormat = 0x0000003B
	TextureFormat_ETC2RGB8A1UnormSrgb  TextureFormat = 0x0000003C
	TextureFormat_ETC2RGBA8Unorm       TextureFormat = 0x0000003D
	TextureFormat_ETC2RGBA8UnormSrgb   TextureFormat = 0x0000003E
	TextureFormat_EACR11Unorm          TextureFormat = 0x0000003F
	TextureFormat_EACR11Snorm          TextureFormat = 0x00000040
	TextureFormat_EACRG11Unorm         TextureFormat = 0x00000041
	TextureFormat_EACRG11Snorm         TextureFormat = 0x00000042
	TextureFormat_ASTC4x4Unorm         TextureFormat = 0x00000043
	TextureFormat_ASTC4x4UnormSrgb     TextureFormat = 0x00000044
	TextureFormat_ASTC5x4Unorm         TextureFormat = 0x00000045
	TextureFormat_ASTC5x4UnormSrgb     TextureFormat = 0x00000046
	TextureFormat_ASTC5x5Unorm         TextureFormat = 0x00000047
	TextureFormat_ASTC5x5UnormSrgb     TextureFormat = 0x00000048
	TextureFormat_ASTC6x5Unorm         TextureFormat = 0x00000049
	TextureFormat_ASTC6x5UnormSrgb     TextureFormat = 0x0000004A
	TextureFormat_ASTC6x6Unorm         TextureFormat = 0x0000004B
	TextureFormat_ASTC6x6UnormSrgb     TextureFormat = 0x0000004C
	TextureFormat_ASTC8x5Unorm         TextureFormat = 0x0000004D
	TextureFormat_ASTC8x5UnormSrgb     TextureFormat = 0x0000004E
	TextureFormat_ASTC8x6Unorm         TextureFormat = 0x0000004F
	TextureFormat_ASTC8x6UnormSrgb     TextureFormat = 0x00000050
	TextureFormat_ASTC8x8Unorm         TextureFormat = 0x00000051
	TextureFormat_ASTC8x8UnormSrgb     TextureFormat = 0x00000052
	TextureFormat_ASTC10x5Unorm        TextureFormat = 0x00000053
	TextureFormat_ASTC10x5UnormSrgb    TextureFormat = 0x00000054
	TextureFormat_ASTC10x6Unorm        TextureFormat = 0x00000055
	TextureFormat_ASTC10x6UnormSrgb    TextureFormat = 0x00000056
	TextureFormat_ASTC10x8Unorm        TextureFormat = 0x00000057
	TextureFormat_ASTC10x8UnormSrgb    TextureFormat = 0x00000058
	TextureFormat_ASTC10x10Unorm       TextureFormat = 0x00000059
	TextureFormat_ASTC10x10UnormSrgb   TextureFormat = 0x0000005A
	TextureFormat_ASTC12x10Unorm       TextureFormat = 0x0000005B
	TextureFormat_ASTC12x10UnormSrgb   TextureFormat = 0x0000005C
	TextureFormat_ASTC12x12Unorm       TextureFormat = 0x0000005D
	TextureFormat_ASTC12x12UnormSrgb   TextureFormat = 0x0000005E
	TextureFormat_Force32              TextureFormat = 0x7FFFFFFF
)

func (v TextureFormat) String() string {
	switch v {
	case TextureFormat_Undefined:
		return "undefined"
	case TextureFormat_R8Unorm:
		return "r8unorm"
	case TextureFormat_R8Snorm:
		return "r8snorm"
	case TextureFormat_R8Uint:
		return "r8uint"
	case TextureFormat_R8Sint:
		return "r8sint"
	case TextureFormat_R16Uint:
		return "r16uint"
	case TextureFormat_R16Sint:
		return "r16sint"
	case TextureFormat_R16Float:
		return "r16float"
	case TextureFormat_RG8Unorm:
		return "rg8unorm"
	case TextureFormat_RG8Snorm:
		return "rg8snorm"
	case TextureFormat_RG8Uint:
		return "rg8uint"
	case TextureFormat_RG8Sint:
		return "rg8sint"
	case TextureFormat_R32Float:
		return "r32float"
	case TextureFormat_R32Uint:
		return "r32uint"
	case TextureFormat_R32Sint:
		return "r32sint"
	case TextureFormat_RG16Uint:
		return "rg16uint"
	case TextureFormat_RG16Sint:
		return "rg16sint"
	case TextureFormat_RG16Float:
		return "rg16float"
	case TextureFormat_RGBA8Unorm:
		return "rgba8unorm"
	case TextureFormat_RGBA8UnormSrgb:
		return "rgba8unorm-srgb"
	case TextureFormat_RGBA8Snorm:
		return "rgba8snorm"
	case TextureFormat_RGBA8Uint:
		return "rgba8uint"
	case TextureFormat_RGBA8Sint:
		return "rgba8sint"
	case TextureFormat_BGRA8Unorm:
		return "bgra8unorm"
	case TextureFormat_BGRA8UnormSrgb:
		return "bgra8unorm-srgb"
	case TextureFormat_RGB10A2Unorm:
		return "rgb10a2unorm"
	case TextureFormat_RG11B10Ufloat:
		return "rg11b10ufloat"
	case TextureFormat_RGB9E5Ufloat:
		return "rgb9e5ufloat"
	case TextureFormat_RG32Float:
		return "rg32float"
	case TextureFormat_RG32Uint:
		return "rg32uint"
	case TextureFormat_RG32Sint:
		return "rg32sint"
	case TextureFormat_RGBA16Uint:
		return "rgba16uint"
	case TextureFormat_RGBA16Sint:
		return "rgba16sint"
	case TextureFormat_RGBA16Float:
		return "rgba16float"
	case TextureFormat_RGBA32Float:
		return "rgba32float"
	case TextureFormat_RGBA32Uint:
		return "rgba32uint"
	case TextureFormat_RGBA32Sint:
		return "rgba32sint"
	case TextureFormat_Stencil8:
		return "stencil8"
	case TextureFormat_Depth16Unorm:
		return "depth16unorm"
	case TextureFormat_Depth24Plus:
		return "depth24plus"
	case TextureFormat_Depth24PlusStencil8:
		return "depth24plus-stencil8"
	case TextureFormat_Depth32Float:
		return "depth32float"
	case TextureFormat_Depth32FloatStencil8:
		return "depth32float-stencil8"
	case TextureFormat_BC1RGBAUnorm:
		return "bc1rgbaunorm"
	case TextureFormat_BC1RGBAUnormSrgb:
		return "bc1rgbaunorm-srgb"
	case TextureFormat_BC2RGBAUnorm:
		return "bc2rgbaunorm"
	case TextureFormat_BC2RGBAUnormSrgb:
		return "bc2rgbaunorm-srgb"
	case TextureFormat_BC3RGBAUnorm:
		return "bc3rgbaunorm"
	case TextureFormat_BC3RGBAUnormSrgb:
		return "bc3rgbaunorm-srgb"
	case TextureFormat_BC4RUnorm:
		return "bc4runorm"
	case TextureFormat_BC4RSnorm:
		return "bc4rsnorm"
	case TextureFormat_BC5RGUnorm:
		return "bc5rgunorm"
	case TextureFormat_BC5RGSnorm:
		return "bc5rgsnorm"
	case TextureFormat_BC6HRGBUfloat:
		return "bc6hrgbufloat"
	case TextureFormat_BC6HRGBFloat:
		return "bc6hrgbfloat"
	case TextureFormat_BC7RGBAUnorm:
		return "bc7rgbaunorm"
	case TextureFormat_BC7RGBAUnormSrgb:
		return "bc7rgbaunorm-srgb"
	case TextureFormat_ETC2RGB8Unorm:
		return "etc2rgb8unorm"
	case TextureFormat_ETC2RGB8UnormSrgb:
		return "etc2rgb8unorm-srgb"
	case TextureFormat_ETC2RGB8A1Unorm:
		return "etc2rgb8a1unorm"
	case TextureFormat_ETC2RGB8A1UnormSrgb:
		return "etc2rgb8a1unorm-srgb"
	case TextureFormat_ETC2RGBA8Unorm:
		return "etc2rgba8unorm"
	case TextureFormat_ETC2RGBA8UnormSrgb:
		return "etc2rgba8unorm-srgb"
	case TextureFormat_EACR11Unorm:
		return "eacr11unorm"
	case TextureFormat_EACR11Snorm:
		return "eacr11snorm"
	case TextureFormat_EACRG11Unorm:
		return "eacrg11unorm"
	case TextureFormat_EACRG11Snorm:
		return "eacrg11snorm"
	case TextureFormat_ASTC4x4Unorm:
		return "astc4x4unorm"
	case TextureFormat_ASTC4x4UnormSrgb:
		return "astc4x4unorm-srgb"
	case TextureFormat_ASTC5x4Unorm:
		return "astc5x4unorm"
	case TextureFormat_ASTC5x4UnormSrgb:
		return "astc5x4unorm-srgb"
	case TextureFormat_ASTC5x5Unorm:
		return "astc5x5unorm"
	case TextureFormat_ASTC5x5UnormSrgb:
		return "astc5x5unorm-srgb"
	case TextureFormat_ASTC6x5Unorm:
		return "astc6x5unorm"
	case TextureFormat_ASTC6x5UnormSrgb:
		return "astc6x5unorm-srgb"
	case TextureFormat_ASTC6x6Unorm:
		return "astc6x6unorm"
	case TextureFormat_ASTC6x6UnormSrgb:
		return "astc6x6unorm-srgb"
	case TextureFormat_ASTC8x5Unorm:
		return "astc8x5unorm"
	case TextureFormat_ASTC8x5UnormSrgb:
		return "astc8x5unorm-srgb"
	case TextureFormat_ASTC8x6Unorm:
		return "astc8x6unorm"
	case TextureFormat_ASTC8x6UnormSrgb:
		return "astc8x6unorm-srgb"
	case TextureFormat_ASTC8x8Unorm:
		return "astc8x8unorm"
	case TextureFormat_ASTC8x8UnormSrgb:
		return "astc8x8unorm-srgb"
	case TextureFormat_ASTC10x5Unorm:
		return "astc10x5unorm"
	case TextureFormat_ASTC10x5UnormSrgb:
		return "astc10x5unorm-srgb"
	case TextureFormat_ASTC10x6Unorm:
		return "astc10x6unorm"
	case TextureFormat_ASTC10x6UnormSrgb:
		return "astc10x6unorm-srgb"
	case TextureFormat_ASTC10x8Unorm:
		return "astc10x8unorm"
	case TextureFormat_ASTC10x8UnormSrgb:
		return "astc10x8unorm-srgb"
	case TextureFormat_ASTC10x10Unorm:
		return "astc10x10unorm"
	case TextureFormat_ASTC10x10UnormSrgb:
		return "astc10x10unorm-srgb"
	case TextureFormat_ASTC12x10Unorm:
		return "astc12x10unorm"
	case TextureFormat_ASTC12x10UnormSrgb:
		return "astc12x10unorm-srgb"
	case TextureFormat_ASTC12x12Unorm:
		return "astc12x12unorm"
	case TextureFormat_ASTC12x12UnormSrgb:
		return "astc12x12unorm-srgb"
	case TextureFormat_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToTextureFormat(str string) TextureFormat {
	switch str {
	case "undefined":
		return TextureFormat_Undefined
	case "r8unorm":
		return TextureFormat_R8Unorm
	case "r8snorm":
		return TextureFormat_R8Snorm
	case "r8uint":
		return TextureFormat_R8Uint
	case "r8sint":
		return TextureFormat_R8Sint
	case "r16uint":
		return TextureFormat_R16Uint
	case "r16sint":
		return TextureFormat_R16Sint
	case "r16float":
		return TextureFormat_R16Float
	case "rg8unorm":
		return TextureFormat_RG8Unorm
	case "rg8snorm":
		return TextureFormat_RG8Snorm
	case "rg8uint":
		return TextureFormat_RG8Uint
	case "rg8sint":
		return TextureFormat_RG8Sint
	case "r32float":
		return TextureFormat_R32Float
	case "r32uint":
		return TextureFormat_R32Uint
	case "r32sint":
		return TextureFormat_R32Sint
	case "rg16uint":
		return TextureFormat_RG16Uint
	case "rg16sint":
		return TextureFormat_RG16Sint
	case "rg16float":
		return TextureFormat_RG16Float
	case "rgba8unorm":
		return TextureFormat_RGBA8Unorm
	case "rgba8unorm-srgb":
		return TextureFormat_RGBA8UnormSrgb
	case "rgba8snorm":
		return TextureFormat_RGBA8Snorm
	case "rgba8uint":
		return TextureFormat_RGBA8Uint
	case "rgba8sint":
		return TextureFormat_RGBA8Sint
	case "bgra8unorm":
		return TextureFormat_BGRA8Unorm
	case "bgra8unorm-srgb":
		return TextureFormat_BGRA8UnormSrgb
	case "rgb10a2unorm":
		return TextureFormat_RGB10A2Unorm
	case "rg11b10ufloat":
		return TextureFormat_RG11B10Ufloat
	case "rgb9e5ufloat":
		return TextureFormat_RGB9E5Ufloat
	case "rg32float":
		return TextureFormat_RG32Float
	case "rg32uint":
		return TextureFormat_RG32Uint
	case "rg32sint":
		return TextureFormat_RG32Sint
	case "rgba16uint":
		return TextureFormat_RGBA16Uint
	case "rgba16sint":
		return TextureFormat_RGBA16Sint
	case "rgba16float":
		return TextureFormat_RGBA16Float
	case "rgba32float":
		return TextureFormat_RGBA32Float
	case "rgba32uint":
		return TextureFormat_RGBA32Uint
	case "rgba32sint":
		return TextureFormat_RGBA32Sint
	case "stencil8":
		return TextureFormat_Stencil8
	case "depth16unorm":
		return TextureFormat_Depth16Unorm
	case "depth24plus":
		return TextureFormat_Depth24Plus
	case "depth24plus-stencil8":
		return TextureFormat_Depth24PlusStencil8
	case "depth32float":
		return TextureFormat_Depth32Float
	case "depth32float-stencil8":
		return TextureFormat_Depth32FloatStencil8
	case "bc1rgbaunorm":
		return TextureFormat_BC1RGBAUnorm
	case "bc1rgbaunorm-srgb":
		return TextureFormat_BC1RGBAUnormSrgb
	case "bc2rgbaunorm":
		return TextureFormat_BC2RGBAUnorm
	case "bc2rgbaunorm-srgb":
		return TextureFormat_BC2RGBAUnormSrgb
	case "bc3rgbaunorm":
		return TextureFormat_BC3RGBAUnorm
	case "bc3rgbaunorm-srgb":
		return TextureFormat_BC3RGBAUnormSrgb
	case "bc4runorm":
		return TextureFormat_BC4RUnorm
	case "bc4rsnorm":
		return TextureFormat_BC4RSnorm
	case "bc5rgunorm":
		return TextureFormat_BC5RGUnorm
	case "bc5rgsnorm":
		return TextureFormat_BC5RGSnorm
	case "bc6hrgbufloat":
		return TextureFormat_BC6HRGBUfloat
	case "bc6hrgbfloat":
		return TextureFormat_BC6HRGBFloat
	case "bc7rgbaunorm":
		return TextureFormat_BC7RGBAUnorm
	case "bc7rgbaunorm-srgb":
		return TextureFormat_BC7RGBAUnormSrgb
	case "etc2rgb8unorm":
		return TextureFormat_ETC2RGB8Unorm
	case "etc2rgb8unorm-srgb":
		return TextureFormat_ETC2RGB8UnormSrgb
	case "etc2rgb8a1unorm":
		return TextureFormat_ETC2RGB8A1Unorm
	case "etc2rgb8a1unorm-srgb":
		return TextureFormat_ETC2RGB8A1UnormSrgb
	case "etc2rgba8unorm":
		return TextureFormat_ETC2RGBA8Unorm
	case "etc2rgba8unorm-srgb":
		return TextureFormat_ETC2RGBA8UnormSrgb
	case "eacr11unorm":
		return TextureFormat_EACR11Unorm
	case "eacr11snorm":
		return TextureFormat_EACR11Snorm
	case "eacrg11unorm":
		return TextureFormat_EACRG11Unorm
	case "eacrg11snorm":
		return TextureFormat_EACRG11Snorm
	case "astc4x4unorm":
		return TextureFormat_ASTC4x4Unorm
	case "astc4x4unorm-srgb":
		return TextureFormat_ASTC4x4UnormSrgb
	case "astc5x4unorm":
		return TextureFormat_ASTC5x4Unorm
	case "astc5x4unorm-srgb":
		return TextureFormat_ASTC5x4UnormSrgb
	case "astc5x5unorm":
		return TextureFormat_ASTC5x5Unorm
	case "astc5x5unorm-srgb":
		return TextureFormat_ASTC5x5UnormSrgb
	case "astc6x5unorm":
		return TextureFormat_ASTC6x5Unorm
	case "astc6x5unorm-srgb":
		return TextureFormat_ASTC6x5UnormSrgb
	case "astc6x6unorm":
		return TextureFormat_ASTC6x6Unorm
	case "astc6x6unorm-srgb":
		return TextureFormat_ASTC6x6UnormSrgb
	case "astc8x5unorm":
		return TextureFormat_ASTC8x5Unorm
	case "astc8x5unorm-srgb":
		return TextureFormat_ASTC8x5UnormSrgb
	case "astc8x6unorm":
		return TextureFormat_ASTC8x6Unorm
	case "astc8x6unorm-srgb":
		return TextureFormat_ASTC8x6UnormSrgb
	case "astc8x8unorm":
		return TextureFormat_ASTC8x8Unorm
	case "astc8x8unorm-srgb":
		return TextureFormat_ASTC8x8UnormSrgb
	case "astc10x5unorm":
		return TextureFormat_ASTC10x5Unorm
	case "astc10x5unorm-srgb":
		return TextureFormat_ASTC10x5UnormSrgb
	case "astc10x6unorm":
		return TextureFormat_ASTC10x6Unorm
	case "astc10x6unorm-srgb":
		return TextureFormat_ASTC10x6UnormSrgb
	case "astc10x8unorm":
		return TextureFormat_ASTC10x8Unorm
	case "astc10x8unorm-srgb":
		return TextureFormat_ASTC10x8UnormSrgb
	case "astc10x10unorm":
		return TextureFormat_ASTC10x10Unorm
	case "astc10x10unorm-srgb":
		return TextureFormat_ASTC10x10UnormSrgb
	case "astc12x10unorm":
		return TextureFormat_ASTC12x10Unorm
	case "astc12x10unorm-srgb":
		return TextureFormat_ASTC12x10UnormSrgb
	case "astc12x12unorm":
		return TextureFormat_ASTC12x12Unorm
	case "astc12x12unorm-srgb":
		return TextureFormat_ASTC12x12UnormSrgb
	case "force32":
		return TextureFormat_Force32
	default:
		panic(fmt.Sprintf("%s convert to TextureFormat error", str))
	}
}

type TextureSampleType uint32

const (
	TextureSampleType_Undefined         TextureSampleType = 0x00000000
	TextureSampleType_Float             TextureSampleType = 0x00000001
	TextureSampleType_UnfilterableFloat TextureSampleType = 0x00000002
	TextureSampleType_Depth             TextureSampleType = 0x00000003
	TextureSampleType_Sint              TextureSampleType = 0x00000004
	TextureSampleType_Uint              TextureSampleType = 0x00000005
)

func (v TextureSampleType) String() string {
	switch v {
	case TextureSampleType_Undefined:
		return "undefined"
	case TextureSampleType_Float:
		return "float"
	case TextureSampleType_UnfilterableFloat:
		return "unfilterable-float"
	case TextureSampleType_Depth:
		return "depth"
	case TextureSampleType_Sint:
		return "sint"
	case TextureSampleType_Uint:
		return "uint"
	default:
		return ""
	}
}
func StringToTextureSampleType(str string) TextureSampleType {
	switch str {
	case "undefined":
		return TextureSampleType_Undefined
	case "float":
		return TextureSampleType_Float
	case "unfilterable-float":
		return TextureSampleType_UnfilterableFloat
	case "depth":
		return TextureSampleType_Depth
	case "sint":
		return TextureSampleType_Sint
	case "uint":
		return TextureSampleType_Uint
	default:
		panic(fmt.Sprintf("%s convert to TextureSampleType error", str))
	}
}

type TextureUsage uint32

const (
	TextureUsage_None             TextureUsage = 0x00000000
	TextureUsage_CopySrc          TextureUsage = 0x00000001
	TextureUsage_CopyDst          TextureUsage = 0x00000002
	TextureUsage_TextureBinding   TextureUsage = 0x00000004
	TextureUsage_StorageBinding   TextureUsage = 0x00000008
	TextureUsage_RenderAttachment TextureUsage = 0x00000010
	TextureUsage_Force32          TextureUsage = 0x7FFFFFFF
)

func (v TextureUsage) String() string {
	switch v {
	case TextureUsage_None:
		return "none"
	case TextureUsage_CopySrc:
		return "copy-src"
	case TextureUsage_CopyDst:
		return "copy-dst"
	case TextureUsage_TextureBinding:
		return "texture-binding"
	case TextureUsage_StorageBinding:
		return "storage-binding"
	case TextureUsage_RenderAttachment:
		return "render-attachment"
	case TextureUsage_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToTextureUsage(str string) TextureUsage {
	switch str {
	case "none":
		return TextureUsage_None
	case "copy-src":
		return TextureUsage_CopySrc
	case "copy-dst":
		return TextureUsage_CopyDst
	case "texture-binding":
		return TextureUsage_TextureBinding
	case "storage-binding":
		return TextureUsage_StorageBinding
	case "render-attachment":
		return TextureUsage_RenderAttachment
	case "force32":
		return TextureUsage_Force32
	default:
		panic(fmt.Sprintf("%s convert to TextureUsage error", str))
	}
}

type TextureViewDimension uint32

const (
	TextureViewDimension_Undefined TextureViewDimension = 0x00000000
	TextureViewDimension_1D        TextureViewDimension = 0x00000001
	TextureViewDimension_2D        TextureViewDimension = 0x00000002
	TextureViewDimension_2DArray   TextureViewDimension = 0x00000003
	TextureViewDimension_Cube      TextureViewDimension = 0x00000004
	TextureViewDimension_CubeArray TextureViewDimension = 0x00000005
	TextureViewDimension_3D        TextureViewDimension = 0x00000006
)

func (v TextureViewDimension) String() string {
	switch v {
	case TextureViewDimension_Undefined:
		return "undefined"
	case TextureViewDimension_1D:
		return "1d"
	case TextureViewDimension_2D:
		return "2d"
	case TextureViewDimension_2DArray:
		return "2darray"
	case TextureViewDimension_Cube:
		return "cube"
	case TextureViewDimension_CubeArray:
		return "cube-array"
	case TextureViewDimension_3D:
		return "3d"
	default:
		return ""
	}
}
func StringToTextureViewDimension(str string) TextureViewDimension {
	switch str {
	case "undefined":
		return TextureViewDimension_Undefined
	case "1d":
		return TextureViewDimension_1D
	case "2d":
		return TextureViewDimension_2D
	case "2darray":
		return TextureViewDimension_2DArray
	case "cube":
		return TextureViewDimension_Cube
	case "cube-array":
		return TextureViewDimension_CubeArray
	case "3d":
		return TextureViewDimension_3D
	default:
		panic(fmt.Sprintf("%s convert to TextureViewDimension error", str))
	}
}

type VertexFormat uint32

const (
	VertexFormat_Undefined VertexFormat = 0x00000000
	VertexFormat_Uint8x2   VertexFormat = 0x00000001
	VertexFormat_Uint8x4   VertexFormat = 0x00000002
	VertexFormat_Sint8x2   VertexFormat = 0x00000003
	VertexFormat_Sint8x4   VertexFormat = 0x00000004
	VertexFormat_Unorm8x2  VertexFormat = 0x00000005
	VertexFormat_Unorm8x4  VertexFormat = 0x00000006
	VertexFormat_Snorm8x2  VertexFormat = 0x00000007
	VertexFormat_Snorm8x4  VertexFormat = 0x00000008
	VertexFormat_Uint16x2  VertexFormat = 0x00000009
	VertexFormat_Uint16x4  VertexFormat = 0x0000000A
	VertexFormat_Sint16x2  VertexFormat = 0x0000000B
	VertexFormat_Sint16x4  VertexFormat = 0x0000000C
	VertexFormat_Unorm16x2 VertexFormat = 0x0000000D
	VertexFormat_Unorm16x4 VertexFormat = 0x0000000E
	VertexFormat_Snorm16x2 VertexFormat = 0x0000000F
	VertexFormat_Snorm16x4 VertexFormat = 0x00000010
	VertexFormat_Float16x2 VertexFormat = 0x00000011
	VertexFormat_Float16x4 VertexFormat = 0x00000012
	VertexFormat_Float32   VertexFormat = 0x00000013
	VertexFormat_Float32x2 VertexFormat = 0x00000014
	VertexFormat_Float32x3 VertexFormat = 0x00000015
	VertexFormat_Float32x4 VertexFormat = 0x00000016
	VertexFormat_Uint32    VertexFormat = 0x00000017
	VertexFormat_Uint32x2  VertexFormat = 0x00000018
	VertexFormat_Uint32x3  VertexFormat = 0x00000019
	VertexFormat_Uint32x4  VertexFormat = 0x0000001A
	VertexFormat_Sint32    VertexFormat = 0x0000001B
	VertexFormat_Sint32x2  VertexFormat = 0x0000001C
	VertexFormat_Sint32x3  VertexFormat = 0x0000001D
	VertexFormat_Sint32x4  VertexFormat = 0x0000001E
	VertexFormat_Force32   VertexFormat = 0x7FFFFFFF
)

func (v VertexFormat) String() string {
	switch v {
	case VertexFormat_Undefined:
		return "undefined"
	case VertexFormat_Uint8x2:
		return "uint8x2"
	case VertexFormat_Uint8x4:
		return "uint8x4"
	case VertexFormat_Sint8x2:
		return "sint8x2"
	case VertexFormat_Sint8x4:
		return "sint8x4"
	case VertexFormat_Unorm8x2:
		return "unorm8x2"
	case VertexFormat_Unorm8x4:
		return "unorm8x4"
	case VertexFormat_Snorm8x2:
		return "snorm8x2"
	case VertexFormat_Snorm8x4:
		return "snorm8x4"
	case VertexFormat_Uint16x2:
		return "uint16x2"
	case VertexFormat_Uint16x4:
		return "uint16x4"
	case VertexFormat_Sint16x2:
		return "sint16x2"
	case VertexFormat_Sint16x4:
		return "sint16x4"
	case VertexFormat_Unorm16x2:
		return "unorm16x2"
	case VertexFormat_Unorm16x4:
		return "unorm16x4"
	case VertexFormat_Snorm16x2:
		return "snorm16x2"
	case VertexFormat_Snorm16x4:
		return "snorm16x4"
	case VertexFormat_Float16x2:
		return "float16x2"
	case VertexFormat_Float16x4:
		return "float16x4"
	case VertexFormat_Float32:
		return "float32"
	case VertexFormat_Float32x2:
		return "float32x2"
	case VertexFormat_Float32x3:
		return "float32x3"
	case VertexFormat_Float32x4:
		return "float32x4"
	case VertexFormat_Uint32:
		return "uint32"
	case VertexFormat_Uint32x2:
		return "uint32x2"
	case VertexFormat_Uint32x3:
		return "uint32x3"
	case VertexFormat_Uint32x4:
		return "uint32x4"
	case VertexFormat_Sint32:
		return "sint32"
	case VertexFormat_Sint32x2:
		return "sint32x2"
	case VertexFormat_Sint32x3:
		return "sint32x3"
	case VertexFormat_Sint32x4:
		return "sint32x4"
	case VertexFormat_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToVertexFormat(str string) VertexFormat {
	switch str {
	case "undefined":
		return VertexFormat_Undefined
	case "uint8x2":
		return VertexFormat_Uint8x2
	case "uint8x4":
		return VertexFormat_Uint8x4
	case "sint8x2":
		return VertexFormat_Sint8x2
	case "sint8x4":
		return VertexFormat_Sint8x4
	case "unorm8x2":
		return VertexFormat_Unorm8x2
	case "unorm8x4":
		return VertexFormat_Unorm8x4
	case "snorm8x2":
		return VertexFormat_Snorm8x2
	case "snorm8x4":
		return VertexFormat_Snorm8x4
	case "uint16x2":
		return VertexFormat_Uint16x2
	case "uint16x4":
		return VertexFormat_Uint16x4
	case "sint16x2":
		return VertexFormat_Sint16x2
	case "sint16x4":
		return VertexFormat_Sint16x4
	case "unorm16x2":
		return VertexFormat_Unorm16x2
	case "unorm16x4":
		return VertexFormat_Unorm16x4
	case "snorm16x2":
		return VertexFormat_Snorm16x2
	case "snorm16x4":
		return VertexFormat_Snorm16x4
	case "float16x2":
		return VertexFormat_Float16x2
	case "float16x4":
		return VertexFormat_Float16x4
	case "float32":
		return VertexFormat_Float32
	case "float32x2":
		return VertexFormat_Float32x2
	case "float32x3":
		return VertexFormat_Float32x3
	case "float32x4":
		return VertexFormat_Float32x4
	case "uint32":
		return VertexFormat_Uint32
	case "uint32x2":
		return VertexFormat_Uint32x2
	case "uint32x3":
		return VertexFormat_Uint32x3
	case "uint32x4":
		return VertexFormat_Uint32x4
	case "sint32":
		return VertexFormat_Sint32
	case "sint32x2":
		return VertexFormat_Sint32x2
	case "sint32x3":
		return VertexFormat_Sint32x3
	case "sint32x4":
		return VertexFormat_Sint32x4
	case "force32":
		return VertexFormat_Force32
	default:
		panic(fmt.Sprintf("%s convert to VertexFormat error", str))
	}
}

type VertexStepMode uint32

const (
	VertexStepMode_Vertex              VertexStepMode = 0x00000000
	VertexStepMode_Instance            VertexStepMode = 0x00000001
	VertexStepMode_VertexBufferNotUsed VertexStepMode = 0x00000002
	VertexStepMode_Force32             VertexStepMode = 0x7FFFFFFF
)

func (v VertexStepMode) String() string {
	switch v {
	case VertexStepMode_Vertex:
		return "vertex"
	case VertexStepMode_Instance:
		return "instance"
	case VertexStepMode_VertexBufferNotUsed:
		return "vertex-buffer-not-used"
	case VertexStepMode_Force32:
		return "force32"
	default:
		return ""
	}
}
func StringToVertexStepMode(str string) VertexStepMode {
	switch str {
	case "vertex":
		return VertexStepMode_Vertex
	case "instance":
		return VertexStepMode_Instance
	case "vertex-buffer-not-used":
		return VertexStepMode_VertexBufferNotUsed
	case "force32":
		return VertexStepMode_Force32
	default:
		panic(fmt.Sprintf("%s convert to VertexStepMode error", str))
	}
}
